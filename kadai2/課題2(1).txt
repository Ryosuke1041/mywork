課題
■簡易掲示板の作成

(1)入力フォームを用意する。入力項目は名前とコメント

(2)フォームで送信された値を受け取り、テキストファイルに保存する。その際1行ごとに「{番号}<>{名前}<>{コメント}<>{投稿された時間}」と言う形で保存する
	例：1<>太郎<>こんにちは<>2018-04-15
	a.保存内容の記号「<>」は他の記号に置き換えてもよいが、コメント等で絶対に入力されないような記号とすること
	b.{番号}のところには最後に投稿された投稿番号に+1した値を入れる。1回目の投稿なら1を入れる。

(3) (2)で作成されたテキストファイルを読み込み、(1)のフォームのすぐ下にループして表示する。
	a.読み込みの際はfile関数を用いれば、簡単に配列として読み込める
	b.読み込んで取得した配列をループさせる
	c.さらに記号「<>」で分割することでそれぞれの値を取得する(explodeを使う)
	d.取得した値をecho等を用いて表示する

(4)指定された番号のものだけ削除できるようにする
	a.入力フォームとは別に、削除番号指定用フォームを用意する。項目は削除対象番号。
	b.POST送信にて削除番号を送信する。その際if文で削除フォームから値が送信された場合のみの処理に分岐させておく
	c.fileで配列化して読み込み、ループさせる
	d.explodeを使って投稿番号を取得する
	e.各投稿番号とPOSTで送信された削除番号を比較し、イコールでない時のみテキストに上書き保存を行う

(5)同様に、指定された番号のものだけ編集できるようにする
	a.入力フォームとは別に、編集番号指定用フォームを用意する。項目は編集対象番号。
	b.POST送信にて編集番号を送信する。その際if文で編集フォームから値が送信された場合のみの処理に分岐させておく
	c.fileで配列化して読み込み、ループさせる
	d.explodeを使って投稿番号を取得する
	e.各投稿番号とPOSTで送信された編集番号を比較し、イコールの時の配列値を取得する
	f.(1)で用意した入力フォームに、取得した配列値を入力済み状態で表示させる
	g.その値をPOSTで送信して編集を行うが、編集かどうかわかるように<input type="hidden">タグを用いて、編集モードかどうかを判別する
	h.編集内容の値が送信されたら、同じくc～dの処理を行い、eと同じように番号の比較を行って、イコールの時に配列値を取得するのではなく送信された値と差し替える
	i.差し替えた配列をテキストに上書き保存する

(6)パスワードを使っての編集削除が行えるようにする
	a.(1)の入力フォームの項目のパスワードを追加する
	b.テキスト保存の際にも、パスワードが保存されるように変更する
	c.(4)(5)の編集削除の際に、パスワードの入力を求める。具体的にはパスワード入力ができるようにしたformを表示し、入力させる。
	d.入力されたパスワードと、書き込み時に保存したパスワードを比較し、一致の場合のみ編集削除が動作するようにする


※注意事項
実際の仕事となるとユーザー側の利便性も重要となってくる
そのため、出来る限りはユーザー側が使いやすいものとなるよう工夫を凝らすこと

例
・間違いを防止するため、削除時はいきなり削除ではなく「本当に削除しますか？」と言う表示を挟み、それでもなおOKした場合のみ削除する
・投稿時、未入力で投稿ボタンを押した場合は、「未入力です」等の表示をする
・編集や削除時パスワードが間違っていた場合は「パスワードが間違っています」と言う表示をする
etc







■Mysql

1.phpとMysqlの連携について学ぶ。まずはデータベースへの接続を行い、テーブルを作成する。
2.テーブル作成の際にはcreateコマンドを使う。(※データベースは作成済みのため、作成するのはテーブルだけでよい)
3.テーブル一覧を表示するコマンドを使って作成が出来たか確認する
4.テーブルの中身を確認するコマンドを使って、意図した内容のテーブルが作成されているか確認する
5.作成ができたらinsertを行って、データを入力する
6.入力したデータをselectによって表示する
7.入力したデータをupdateによって編集する
8.入力したデータをdeleteによって削除する

$sql = 'select * from animeTable';
$stmt = $pdo->query($sql);

■応用
1.簡易掲示板の際にはデータ保存をテキストで行っていたが、それを保存先をMysqlに変更して作成する



